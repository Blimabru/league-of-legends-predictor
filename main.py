"""
M√≥dulo Principal do Preditor de Vit√≥rias no League of Legends
------------------------------------------------------------
Este aplicativo usa a API da Riot Games para coletar dados de jogadores,
processa esses dados com t√©cnicas de minera√ß√£o de dados e machine learning,
e exibe visualiza√ß√µes e previs√µes interativas no navegador atrav√©s do Streamlit.
"""

# ===========================
# Depend√™ncias
# ===========================

import streamlit as st          # Interface Web para aplica√ß√£o

# Importa fun√ß√µes para acessar a API da Riot (PUUID, hist√≥rico de partidas)
from api_utils import getPUUID, getMatches

# Importa fun√ß√£o para processar os dados das partidas em DataFrame
from data_processing import processMatches

# Importa fun√ß√µes de machine learning: treinamento, predi√ß√£o e mapeamento de roles
from model import trainModel, predictByMostPlayed, ROLE_MAPPING

# Importa fun√ß√µes para visualiza√ß√£o dos resultados e gr√°ficos
from visualization import (
    show_general_stats,        # Estat√≠sticas gerais do jogador
    show_model_eval,           # M√©tricas de avalia√ß√£o do modelo
    show_winrate_by_champion,  # Taxa de vit√≥ria por campe√£o
    show_role_distribution,    # Distribui√ß√£o de lanes jogadas
    show_mining_process,       # Processo de minera√ß√£o de dados
    show_lane_predictions      # Previs√µes por lane
)

# Importa m√≥dulo de cr√©ditos
from credits import display_credits_if_active

# ===========================
# Configura√ß√£o da p√°gina
# ===========================

# Define o t√≠tulo da p√°gina, largura (wide permite usar toda a janela do navegador)
st.set_page_config(page_title="An√°lise de LoL", layout="wide")

# ===========================
# Exibe o bot√£o e conte√∫do de cr√©ditos
# ===========================
display_credits_if_active()

# ===========================
# T√≠tulo e descri√ß√£o
# ===========================

# T√≠tulo principal do aplicativo
st.title("üîÆ Previs√£o de Vit√≥rias no League of Legends")
st.markdown("<br>", unsafe_allow_html=True)  # Espa√ßo em branco

# Expander com explica√ß√£o resumida do funcionamento do aplicativo
with st.expander("Este aplicativo utiliza minera√ß√£o de dados para analisar estat√≠sticas de jogadores e prever chances de vit√≥ria com base no hist√≥rico de partidas."):
    st.markdown("""
    - **Minera√ß√£o de Dados**: Coleta informa√ß√µes de partidas jogadas, como campe√µes usados, taxa de vit√≥rias, KDA, e Lanes jogadas.
    - **Machine Learning**: Treina um modelo de Random Forest para prever a probabilidade de vit√≥ria com base nos dados coletados.
    """)

st.markdown("<br><br>", unsafe_allow_html=True)  # Espa√ßo adicional

# ===========================
# Entrada de dados do usu√°rio
# ===========================

# Layout de tr√™s colunas para entrada do Riot ID (format: name#tag)
colRiotId, colHashtag, colTagLine = st.columns([2, 0.1, 1])

with colRiotId:
    # Campo para o nome do jogador
    player_name = st.text_input("Riot ID", "PFM Misto Quente", help="Insira o Riot ID do jogador.")

with colHashtag:
    # S√≠mbolo '#' entre nome e tagline (apenas visual)
    st.markdown("<h1 style='text-align: center;'>#</h1>", unsafe_allow_html=True)

with colTagLine:
    # Campo para a tagline do jogador
    tag_line = st.text_input("Tagline", "PQP", help="Insira a Tagline do jogador.")

# Controle deslizante para selecionar o n√∫mero de partidas a analisar
quant_matches = st.slider(
    "N√∫mero de partidas a analisar",
    min_value=10,         # M√≠nimo de 10 partidas
    max_value=100,        # M√°ximo de 100 partidas
    value=20,             # Valor padr√£o: 20 partidas
    help="Escolha o n√∫mero de partidas que deseja analisar. Mais partidas podem levar mais tempo."
)

# =============================
# Fluxo principal da aplica√ß√£o
# =============================

# Bot√£o que inicia o processo de an√°lise quando clicado
if st.button("üîç Analisar Jogador"):
    # Elementos de UI para feedback visual do progresso
    progress_bar = st.progress(0)  # Barra de progresso iniciando em 0%
    status_text = st.empty()       # Espa√ßo para texto de status atualiz√°vel

    # ETAPA 1: Buscar o PUUID do jogador na API da Riot
    status_text.text("üîç Procurando jogador...")
    account = getPUUID(player_name, tag_line)  # Busca informa√ß√µes da conta
    puuid = account.get('puuid')               # Extrai o PUUID (identificador √∫nico)
    progress_bar.progress(0.15)                # Atualiza progresso para 15%

    # Verifica se o jogador foi encontrado
    if not puuid:
        # Exibe mensagem de erro se o jogador n√£o for encontrado
        st.error(f"Erro ao buscar jogador: {account.get('message', 'Jogador n√£o encontrado.')}")
    else:
        # ETAPA 2: Buscar hist√≥rico de partidas
        status_text.text("‚¨áÔ∏è Baixando hist√≥rico de partidas...")
        matches = getMatches(puuid, quant_matches)  # Obt√©m IDs das partidas recentes
        progress_bar.progress(0.3)                  # Atualiza progresso para 30%

        # ETAPA 3: Processar os dados das partidas
        status_text.text("üé≤ Montando DataFrame...")
        # Processa os detalhes de cada partida e cria um DataFrame
        df = processMatches(puuid, matches, progress_bar)
        progress_bar.progress(0.45)  # Atualiza progresso para 45%

        # ETAPA 4: Preparar os dados para machine learning
        status_text.text("üî¢ Realizando One-Hot Encoding")
        progress_bar.progress(0.7)   # Atualiza progresso para 70%

        # ETAPA 5: Treinar o modelo de machine learning
        status_text.text("üî¢ Aplicando algoritmo Random Forest...")
        # Treina o modelo e obt√©m os conjuntos de dados e o DataFrame codificado
        model, x_train, x_test, y_train, y_test, df_encoded = trainModel(df)
        progress_bar.progress(1.0)   # Completa a barra de progresso (100%)
        status_text.text("Conclu√≠do!")

        # ETAPA 6: Criar abas para exibir diferentes visualiza√ß√µes
        tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
            "üìà Estat√≠sticas Gerais",
            "üî¢ Avalia√ß√£o do Modelo",
            "üèÜ Taxa de Vit√≥ria por Campe√£o",
            "üìä Distribui√ß√£o de Lanes",
            "üîÑ Processo de Minera√ß√£o",
            "üîÆ Previs√£o de Chances de Vit√≥ria por Lane",
        ])

        # Preenche cada aba com a visualiza√ß√£o correspondente
        with tab1:
            # Exibe estat√≠sticas gerais do jogador
            show_general_stats(df)
        with tab2:
            # Exibe m√©tricas de avalia√ß√£o do modelo (precis√£o, recall, etc.)
            show_model_eval(model, x_test, y_test)
        with tab3:
            # Exibe gr√°fico de taxa de vit√≥ria por campe√£o jogado
            show_winrate_by_champion(df)
        with tab4:
            # Exibe gr√°fico de distribui√ß√£o de lanes/posi√ß√µes jogadas
            show_role_distribution(df)
        with tab5:
            # Exibe detalhes do processo de minera√ß√£o e transforma√ß√£o de dados
            show_mining_process(df, df_encoded, model, x_train, y_train, x_test, y_test)
        with tab6:
            # Exibe previs√µes de chance de vit√≥ria por lane/posi√ß√£o
            show_lane_predictions(model, x_train, df)