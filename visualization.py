"""
M√≥dulo de Visualiza√ß√£o de Dados do League of Legends Predictor
-------------------------------------------------------------
Este m√≥dulo implementa fun√ß√µes para criar visualiza√ß√µes interativas
dos dados processados e resultados do modelo de machine learning,
utilizando Streamlit e Plotly para gr√°ficos interativos.
"""

# ===========================
# Depend√™ncias
# ===========================
import streamlit as st           # Framework para cria√ß√£o de aplica√ß√µes web interativas
import plotly.express as px      # Biblioteca para gr√°ficos interativos e responsivos
import pandas as pd              # Manipula√ß√£o e an√°lise de dados tabulares
from sklearn.metrics import confusion_matrix, classification_report  # M√©tricas para avalia√ß√£o de modelos ML

from model import ROLE_MAPPING, predictByMostPlayed  # Importa mapeamento de roles e fun√ß√£o de predi√ß√£o

# ====================================
# Fun√ß√µes de Visualiza√ß√£o
# ====================================

def show_general_stats(df):
    """
    Exibe estat√≠sticas gerais do jogador analisado.
    
    Apresenta:
    - Total de partidas analisadas
    - Taxa de vit√≥rias global
    - Gr√°fico de pizza com propor√ß√£o de vit√≥rias e derrotas
    
    Par√¢metros:
        df (pandas.DataFrame): DataFrame com estat√≠sticas das partidas
    """
    # Adiciona subt√≠tulo na interface
    st.subheader("üìà Estat√≠sticas Gerais")
    
    # Exibe m√©tricas b√°sicas como texto
    st.write(f"**Total de partidas analisadas:** {len(df)}")
    st.write(f"**Taxa de vit√≥rias:** {df['win'].mean() * 100:.0f}%")
    
    # Calcula quantidades absolutas de vit√≥rias e derrotas
    victories = df['win'].sum()                # Soma de True (1) na coluna 'win'
    defeats = len(df) - victories              # Total de partidas menos vit√≥rias
    
    # Cria gr√°fico de pizza usando plotly express
    fig = px.pie(
        names=['Vit√≥rias', 'Derrotas'],        # Nomes das fatias
        values=[victories, defeats],            # Valores para cada fatia
        color=['Vit√≥rias', 'Derrotas'],         # Cores diferentes para cada categoria
        color_discrete_map={'Vit√≥rias': '#4CAF50', 'Derrotas': '#F44336'},  # Verde para vit√≥rias, vermelho para derrotas
        title='Propor√ß√£o de Vit√≥rias e Derrotas'  # T√≠tulo do gr√°fico
    )
    
    # Personaliza o estilo do texto no gr√°fico
    fig.update_traces(
        textinfo='percent+label',               # Mostra porcentagem e r√≥tulo em cada fatia
        textfont=dict(size=16, family="Arial", color="black"),  # Fonte do texto
        insidetextfont=dict(size=16, family="Arial", color="black"),  # Fonte dentro das fatias
        textfont_weight='bold'                  # Texto em negrito
        )
    
    # Exibe o gr√°fico interativo na interface Streamlit
    st.plotly_chart(fig)

def show_model_eval(model, x_test, y_test):
    """
    Visualiza a avalia√ß√£o do desempenho do modelo de machine learning.
    
    Apresenta:
    - Matriz de confus√£o: visualiza√ß√£o de verdadeiros/falsos positivos/negativos
    - Relat√≥rio de classifica√ß√£o: precis√£o, recall, f1-score
    
    Par√¢metros:
        model: Modelo Random Forest treinado
        x_test: Features do conjunto de teste
        y_test: Target do conjunto de teste (win/loss)
    """
    # Adiciona subt√≠tulo na interface
    st.subheader("üìä Avalia√ß√£o do Modelo")
    
    # Faz previs√µes com o modelo no conjunto de teste
    y_pred = model.predict(x_test)
    
    # Calcula a matriz de confus√£o (compara valores reais vs. preditos)
    # [0,0]: Verdadeiros Negativos, [0,1]: Falsos Positivos
    # [1,0]: Falsos Negativos, [1,1]: Verdadeiros Positivos
    cm = confusion_matrix(y_test, y_pred)
    
    # Cria visualiza√ß√£o da matriz de confus√£o com plotly
    fig_cm = px.imshow(
        cm,                                    # Matriz de confus√£o calculada
        labels=dict(x="Predito", y="Real", color="Qtd"),  # R√≥tulos dos eixos
        x=["Derrota", "Vit√≥ria"],              # R√≥tulos do eixo x (colunas)
        y=["Derrota", "Vit√≥ria"],              # R√≥tulos do eixo y (linhas)
        color_continuous_scale="Blues",        # Escala de cores (azuis)
        text_auto=True,                        # Mostra valores automaticamente
        title="Matriz de Confus√£o"             # T√≠tulo do gr√°fico
    )
    
    # Personaliza o estilo dos eixos e texto
    fig_cm.update_xaxes(tickfont=dict(size=16, family="Arial", color="black"))
    fig_cm.update_yaxes(tickfont=dict(size=16, family="Arial", color="black"))
    fig_cm.update_traces(textfont=dict(size=18, family="Arial", color="black"))
    
    # Exibe o gr√°fico na interface
    st.plotly_chart(fig_cm)
    
    # Adiciona t√≠tulo para o relat√≥rio de classifica√ß√£o
    st.write("**Relat√≥rio de Classifica√ß√£o:**")
    
    # Gera relat√≥rio detalhado de m√©tricas de classifica√ß√£o
    # output_dict=True retorna o relat√≥rio como dicion√°rio para manipula√ß√£o
    report = classification_report(y_test, y_pred, output_dict=True)
    
    # Converte o relat√≥rio para DataFrame para melhor visualiza√ß√£o
    report_df = pd.DataFrame(report).transpose()
    
    # Exibe o relat√≥rio como tabela interativa no Streamlit
    st.dataframe(report_df)

def show_winrate_by_champion(df):
    """
    Exibe a taxa de vit√≥ria por campe√£o utilizado pelo jogador.
    
    Apresenta um gr√°fico de barras dos 10 campe√µes com maior taxa de vit√≥ria.
    
    Par√¢metros:
        df (pandas.DataFrame): DataFrame com estat√≠sticas das partidas
    """
    # Adiciona subt√≠tulo na interface
    st.subheader("üèÜ Taxa de Vit√≥ria por Campe√£o")
    
    # Calcula a taxa de vit√≥ria para cada campe√£o
    # 1. Agrupa por campe√£o
    # 2. Calcula a m√©dia da coluna 'win' (True=1, False=0)
    # 3. Converte para porcentagem multiplicando por 100
    # 4. Ordena em ordem crescente (para mostrar os piores primeiro)
    win_rate = df.groupby('champion')['win'].mean().sort_values(ascending=True) * 100
    
    # Cria gr√°fico de barras para os 10 campe√µes com maior taxa de vit√≥ria
    fig_bar = px.bar(
        win_rate.head(10),                     # Seleciona os 10 primeiros (pior desempenho)
        x=win_rate.head(10).index,             # Nomes dos campe√µes no eixo X
        y=win_rate.head(10).values,            # Taxa de vit√≥ria no eixo Y
        labels={'x': 'Campe√£o', 'y': 'Taxa de Vit√≥ria (%)'},  # R√≥tulos dos eixos
        title="Top 10 Campe√µes - Maior Taxa de Vit√≥ria"       # T√≠tulo do gr√°fico
    )
    
    # Exibe o gr√°fico na interface
    st.plotly_chart(fig_bar)

def show_role_distribution(df):
    """
    Visualiza a distribui√ß√£o de lanes (posi√ß√µes) jogadas pelo usu√°rio.
    
    Apresenta um gr√°fico de pizza mostrando a propor√ß√£o de partidas
    em cada lane/posi√ß√£o do mapa.
    
    Par√¢metros:
        df (pandas.DataFrame): DataFrame com estat√≠sticas das partidas
    """
    # Adiciona subt√≠tulo na interface
    st.subheader("üìä Distribui√ß√£o de Lanes")
    
    # Calcula a contagem de partidas por lane/role
    role_distribution = df['role'].value_counts()
    
    # Cria gr√°fico de pizza usando plotly express
    fig_roles = px.pie(
        # Converte c√≥digos de role (ex: "UTILITY") para nomes amig√°veis (ex: "Suporte")
        names=role_distribution.index.map(ROLE_MAPPING),  
        values=role_distribution.values,        # N√∫mero de partidas em cada lane
        color=role_distribution.index.map(ROLE_MAPPING),  # Cores diferentes por lane
        color_discrete_sequence=px.colors.qualitative.Pastel,  # Paleta de cores pastel
        title="Distribui√ß√£o de Lanes"           # T√≠tulo do gr√°fico
    )
    
    # Personaliza o estilo do texto no gr√°fico
    fig_roles.update_traces(
        textinfo='percent+label',               # Mostra porcentagem e r√≥tulo
        textfont=dict(size=16, family="Arial", color="black"),  # Fonte do texto
        insidetextfont=dict(size=16, family="Arial", color="black"),  # Fonte dentro das fatias
        textfont_weight='bold'                  # Texto em negrito
    )
    
    # Exibe o gr√°fico na interface
    st.plotly_chart(fig_roles)

def show_mining_process(df, df_encoded, model, x_train, y_train, x_test, y_test):
    """
    Apresenta detalhes do processo de minera√ß√£o de dados e machine learning.
    
    Exibe:
    - DataFrame original antes do processamento
    - DataFrame codificado ap√≥s one-hot encoding
    - Import√¢ncia das vari√°veis para o modelo
    - Informa√ß√µes sobre divis√£o treino/teste
    
    Organizado em abas para melhor navega√ß√£o.
    
    Par√¢metros:
        df: DataFrame original
        df_encoded: DataFrame ap√≥s one-hot encoding
        model: Modelo treinado
        x_train, y_train: Dados de treino
        x_test, y_test: Dados de teste
    """
    # Adiciona subt√≠tulo na interface
    st.subheader("üîÑ Processo de Minera√ß√£o")
    
    # Cria abas para organizar as diferentes visualiza√ß√µes
    subtab1, subtab2, subtab3, subtab4 = st.tabs([
        "DataFrame Original",    # Dados brutos
        "DataFrame Codificado",  # Dados ap√≥s processamento
        "Vari√°veis",             # Import√¢ncia das features
        "Dados de Treino/Teste"  # Informa√ß√µes de particionamento
    ])
    
    # Aba 1: DataFrame Original
    with subtab1:
        st.write("**DataFrame Original:**")
        st.write("1. **Coleta de Dados:** Os dados s√£o coletados diretamente da API da Riot Games.")
        st.write("2. **Processamento:** As informa√ß√µes das partidas s√£o organizadas em um DataFrame.")
        st.dataframe(df)  # Exibe o DataFrame original
    
    # Aba 2: DataFrame ap√≥s One-Hot Encoding
    with subtab2:
        st.write("**DataFrame Codificado:**")
        st.write("3. **Convers√£o de Dados:** Vari√°veis categ√≥ricas, como campe√µes e roles, s√£o convertidas em valores num√©ricos - Utiliza **One-Hot Encoding**.")
        st.dataframe(df_encoded)  # Exibe o DataFrame codificado
    
    # Aba 3: Import√¢ncia das Vari√°veis
    with subtab3:
        st.write("### Import√¢ncia das vari√°veis para o modelo:")
        # Extrai a import√¢ncia de cada feature do modelo Random Forest
        importances = model.feature_importances_  # Array de import√¢ncias
        feature_names = x_train.columns           # Nomes das features
        
        # Cria DataFrame com features e suas import√¢ncias
        importances_df = pd.DataFrame({'feature': feature_names, 'importance': importances})
        
        # Exibe as features ordenadas por import√¢ncia (mais importantes primeiro)
        st.dataframe(importances_df.sort_values('importance', ascending=False))
    
    # Aba 4: Informa√ß√µes sobre Dados de Treino e Teste
    with subtab4:
        st.write("### **Dados de Treino e Teste**")
        # Explica como os dados s√£o divididos
        st.markdown("""
        Ap√≥s o processamento e convers√£o dos dados, eles s√£o divididos em dois conjuntos:
        - **Dados de Treino:** Usados para treinar o modelo de Machine Learning. Este conjunto representa aproximadamente 80% dos dados dispon√≠veis.
        - **Dados de Teste:** Usados para avaliar o desempenho do modelo. Este conjunto representa aproximadamente 20% dos dados dispon√≠veis.
        """)
        
        # Exibe dimens√µes dos conjuntos de treino
        st.write("#### **Dimens√µes dos Dados de Treino:**")
        st.write(f"- **x_train:** {x_train.shape} (Caracter√≠sticas usadas para treinar o modelo)")
        st.write(f"- **y_train:** {y_train.shape} (R√≥tulos correspondentes √†s vit√≥rias ou derrotas)")
        
        # Exibe dimens√µes dos conjuntos de teste
        st.write("#### **Dimens√µes dos Dados de Teste:**")
        st.write(f"- **x_test:** {x_test.shape} (Caracter√≠sticas usadas para avaliar o modelo)")
        st.write(f"- **y_test:** {y_test.shape} (R√≥tulos correspondentes √†s vit√≥rias ou derrotas)")
        
        # Explica como funciona o processo de treinamento/teste
        st.markdown("""
        **Como funciona:**
        - O conjunto de treino (**x_train**, **y_train**) √© usado para ajustar os par√¢metros do modelo de Random Forest.
        - O conjunto de teste (**x_test**, **y_test**) √© usado para verificar se o modelo consegue generalizar bem para dados que ele nunca viu antes.
        - As dimens√µes indicam o n√∫mero de amostras e caracter√≠sticas presentes em cada conjunto.
        """)

def show_lane_predictions(model, x_train, df):
    """
    Visualiza as previs√µes de chance de vit√≥ria para cada lane.
    
    Cria uma interface com abas, uma para cada lane jogada pelo usu√°rio,
    mostrando as chances de vit√≥ria previstas para diferentes campe√µes
    naquela lane espec√≠fica.
    
    Par√¢metros:
        model: Modelo Random Forest treinado
        x_train: Features de treino (para estrutura do modelo)
        df: DataFrame original com estat√≠sticas das partidas
    """
    # Adiciona subt√≠tulo na interface
    st.subheader("ü§ñ Previs√£o de Chances de Vit√≥ria por Lane")
    
    # Obt√©m previs√µes para campe√µes mais jogados em diferentes lanes
    results = predictByMostPlayed(model, x_train, df)
    
    # Obt√©m lista de lanes √∫nicas jogadas pelo usu√°rio
    lanes = df['role'].unique()
    
    # Cria uma aba para cada lane/posi√ß√£o
    # Converte c√≥digos de role para nomes amig√°veis usando ROLE_MAPPING
    lane_tabs = st.tabs([ROLE_MAPPING.get(lane, lane) for lane in lanes])
    
    # Itera sobre cada lane para preencher o conte√∫do das abas
    for i, lane in enumerate(lanes):
        with lane_tabs[i]:
            # Adiciona subt√≠tulo espec√≠fico para a lane
            st.subheader(f"Previs√µes para a Lane: {ROLE_MAPPING.get(lane, lane)}")
            
            # Filtra resultados apenas para a lane atual
            lane_results = [r for r in results if r[1] == ROLE_MAPPING.get(lane, lane)]
            
            # Verifica se existem previs√µes para esta lane
            if lane_results:
                # Converte resultados para DataFrame para visualiza√ß√£o
                lane_df = pd.DataFrame(lane_results, columns=["Campe√£o", "Role", "Chance de Vit√≥ria (%)"])
                
                # Cria gr√°fico de pizza para visualizar chances de vit√≥ria
                fig_lane = px.pie(
                    lane_df,
                    names="Campe√£o",                  # Nomes dos campe√µes
                    values="Chance de Vit√≥ria (%)",   # Valores das chances de vit√≥ria
                    title=f"Chances de Vit√≥ria - {ROLE_MAPPING.get(lane, lane)}",  # T√≠tulo
                    color_discrete_sequence=px.colors.qualitative.Pastel  # Paleta de cores
                )
                
                # Personaliza o estilo do texto no gr√°fico
                fig_lane.update_traces(
                    textinfo='percent+label',               # Mostra porcentagem e r√≥tulo
                    textfont=dict(size=18, family="Arial", color="black"),  # Estilo do texto
                    insidetextfont=dict(size=18, family="Arial", color="black")  # Estilo dentro das fatias
                )
                
                # Exibe o gr√°fico na interface
                st.plotly_chart(fig_lane)
            else:
                # Mensagem caso n√£o haja previs√µes para esta lane
                st.write("Nenhuma previs√£o dispon√≠vel para esta lane.")